/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConvolutionManager_JDialog.java
 *
 * Created on Oct 4, 2011, 6:28:00 PM
 */
package deconvolutionapp;

//user imports
import javax.swing.*;
import org.jfree.chart.ChartPanel;

import org.jfree.chart.plot.XYPlot;

import java.util.*;

import Jama.Matrix;


/**
 * Class controls creating, modification and saving convolution kernels.
 * 
 * @author Gregory
 */
public class ConvolutionManager_JDialog extends javax.swing.JDialog {

    protected ConfigReader ConfigFile;
    protected MS_DataStructure ReferencedMSdata;
    protected Boolean OK_flag;
    
    //M/Z domain for ION vector
    protected Double MZ_Value;
    protected Double MZ_Range;
    
    //Orginal ION vector
    private int[] orginalIONvector;
    
    //Modified ION vector
    protected int[] ModIONvector;
    
    //Matrix A
    protected Matrix A;
    
    //Configuration Recipe
    protected ArrayList<String> recipe = new ArrayList<String>();
    
    //Pre Processing Controller
    private SP_Controller PreProcessEngine;
      
    /**
     * Constructor
     * 
     * @param parent Parent window
     * @param modal Used to force input
     */
    public ConvolutionManager_JDialog(java.awt.Frame parent, ConfigReader ConfigFile,boolean modal) {
        super(parent, modal);
        initComponents();
        
        //Set equal to false
        windowParameterlabel.setEnabled(false);
        PercentofPeak.setEnabled(false);
        FixedIndex.setEnabled(false);
        PercentPeak_value.setEnabled(false);
        PercentLabel.setEnabled(false);
        Fixed_min_value.setEnabled(false);
        Fixed_max_value.setEnabled(false);
        minEV.setEnabled(false);
        MAXEV.setEnabled(false);
        
        //Create a SP engine
        PreProcessEngine = new SP_Controller();
        
        //ConfigFile Reference
        this.ConfigFile = ConfigFile;
    }
    
    /**
     * Constructor with passed MS_Data structure
     * 
     * @param parent Parent Window
     * @param modal Used to force input
     * @param dataStructure MS Datastructure class
     * @param mzValue Centered m/z value
     * @param mzRange m/z range around mzValue
     */
    public ConvolutionManager_JDialog(java.awt.Frame parent, ConfigReader ConfigFile ,boolean modal,
                                        MS_DataStructure dataStructure,
                                        Double mzValue, Double mzRange) {
        super(parent, modal);
        initComponents();
        
        //Set equal to false
        windowParameterlabel.setEnabled(false);
        PercentPeak_value.setEnabled(false);
        PercentLabel.setEnabled(false);
        Fixed_min_value.setEnabled(false);
        Fixed_max_value.setEnabled(false);
        minEV.setEnabled(false);
        MAXEV.setEnabled(false);
        
        //Create a SP engine
        PreProcessEngine = new SP_Controller();
        
        //Reset the recipes
        recipe.clear();
        
        //ConfigFile Reference
        this.ConfigFile = ConfigFile;
        
        //Handle flag
        this.OK_flag = Boolean.FALSE;
        
        //populate the local references
        this.ReferencedMSdata = dataStructure;
        this.MZ_Value = mzValue;
        this.MZ_Range = mzRange;
        
        try{
            //Do the LUT and Summation to rebuild the starting ION Vector
            int indexStart  = this.ReferencedMSdata.getMZindex((this.MZ_Value - this.MZ_Range));
            int indexEnd    = this.ReferencedMSdata.getMZindex((this.MZ_Value + this.MZ_Range));
            
            //Get New Vector
            orginalIONvector = this.ReferencedMSdata.getTotalIonRangeArray(indexStart, indexEnd);
            
            //Populate the ION Charts
            XYChartHelpers IonChart = new XYChartHelpers(ChartType.IonChart, OrginalPanel.getSize());
            OrginalPanel.add(IonChart.returnFullChart(this.ReferencedMSdata.getIonVectorArray(), 
                                                  this.orginalIONvector));
            OrginalPanel.validate();
            OrginalPanel.repaint();
            
            ModifiedPanel.add(IonChart.returnFullChart(this.ReferencedMSdata.getIonVectorArray(), 
                                                  this.orginalIONvector));
            ModifiedPanel.validate();
            ModifiedPanel.repaint();
            
            //Clear the objects
            IonChart = null;
        }
        catch (Exception ex){
            ex.printStackTrace();
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        SmoothButtonGroup = new javax.swing.ButtonGroup();
        WindowButtonGroup = new javax.swing.ButtonGroup();
        WindowParameterButtonGroup = new javax.swing.ButtonGroup();
        RangeAxisGroup = new javax.swing.ButtonGroup();
        DomainAxisGroup = new javax.swing.ButtonGroup();
        NormalizeButtonGroup = new javax.swing.ButtonGroup();
        OrginalPanel = new javax.swing.JPanel();
        ModifiedPanel = new javax.swing.JPanel();
        ControlPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        SmoothTab = new javax.swing.JPanel();
        Smoothnone = new javax.swing.JRadioButton();
        SmoothARMA = new javax.swing.JRadioButton();
        SmoothPoisson = new javax.swing.JRadioButton();
        ARMAnumSamples = new javax.swing.JTextField();
        numSamplesText = new javax.swing.JLabel();
        WindowTab = new javax.swing.JPanel();
        windowNone = new javax.swing.JRadioButton();
        windowRectangle = new javax.swing.JRadioButton();
        windowBlackman = new javax.swing.JRadioButton();
        PanelWindowParameters = new javax.swing.JPanel();
        windowParameterlabel = new javax.swing.JLabel();
        PercentofPeak = new javax.swing.JRadioButton();
        PercentPeak_value = new javax.swing.JTextField();
        PercentLabel = new javax.swing.JLabel();
        FixedIndex = new javax.swing.JRadioButton();
        Fixed_min_value = new javax.swing.JTextField();
        minEV = new javax.swing.JLabel();
        Fixed_max_value = new javax.swing.JTextField();
        MAXEV = new javax.swing.JLabel();
        OffsetTab = new javax.swing.JPanel();
        Rangenone = new javax.swing.JRadioButton();
        FixedRangeradio = new javax.swing.JRadioButton();
        domaindNone = new javax.swing.JRadioButton();
        FixedDomainradio = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        RangeOffsetvalue = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        NormalTab = new javax.swing.JPanel();
        noneNormal = new javax.swing.JRadioButton();
        NormalPeakradio = new javax.swing.JRadioButton();
        NormalPeakvalue = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        NormalEnergyradio = new javax.swing.JRadioButton();
        NormalEnergyvalue = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        ButtonPanel = new javax.swing.JPanel();
        ApplyButton = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        SaveCancelpanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        KernelNamevalue = new javax.swing.JTextField();
        SaveButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(deconvolutionapp.DeConvolutionApp_RevD.class).getContext().getResourceMap(ConvolutionManager_JDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);

        OrginalPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("OrginalPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("OrginalPanel.border.titleFont"))); // NOI18N
        OrginalPanel.setName("OrginalPanel"); // NOI18N
        OrginalPanel.setPreferredSize(new java.awt.Dimension(816, 200));

        javax.swing.GroupLayout OrginalPanelLayout = new javax.swing.GroupLayout(OrginalPanel);
        OrginalPanel.setLayout(OrginalPanelLayout);
        OrginalPanelLayout.setHorizontalGroup(
            OrginalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 939, Short.MAX_VALUE)
        );
        OrginalPanelLayout.setVerticalGroup(
            OrginalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );

        ModifiedPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("ModifiedPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("ModifiedPanel.border.titleFont"))); // NOI18N
        ModifiedPanel.setName("ModifiedPanel"); // NOI18N
        ModifiedPanel.setPreferredSize(new java.awt.Dimension(848, 200));

        javax.swing.GroupLayout ModifiedPanelLayout = new javax.swing.GroupLayout(ModifiedPanel);
        ModifiedPanel.setLayout(ModifiedPanelLayout);
        ModifiedPanelLayout.setHorizontalGroup(
            ModifiedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 939, Short.MAX_VALUE)
        );
        ModifiedPanelLayout.setVerticalGroup(
            ModifiedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );

        ControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("ControlPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("ControlPanel.border.titleFont"))); // NOI18N
        ControlPanel.setName("ControlPanel"); // NOI18N
        ControlPanel.setPreferredSize(new java.awt.Dimension(816, 200));

        jTabbedPane1.setBackground(resourceMap.getColor("jTabbedPane1.background")); // NOI18N
        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        SmoothTab.setBackground(resourceMap.getColor("SmoothTab.background")); // NOI18N
        SmoothTab.setName("SmoothTab"); // NOI18N

        Smoothnone.setBackground(resourceMap.getColor("Smoothnone.background")); // NOI18N
        SmoothButtonGroup.add(Smoothnone);
        Smoothnone.setSelected(true);
        Smoothnone.setText(resourceMap.getString("Smoothnone.text")); // NOI18N
        Smoothnone.setToolTipText(resourceMap.getString("Smoothnone.toolTipText")); // NOI18N
        Smoothnone.setName("Smoothnone"); // NOI18N

        SmoothARMA.setBackground(resourceMap.getColor("SmoothARMA.background")); // NOI18N
        SmoothButtonGroup.add(SmoothARMA);
        SmoothARMA.setText(resourceMap.getString("SmoothARMA.text")); // NOI18N
        SmoothARMA.setToolTipText(resourceMap.getString("SmoothARMA.toolTipText")); // NOI18N
        SmoothARMA.setName("SmoothARMA"); // NOI18N

        SmoothPoisson.setBackground(resourceMap.getColor("SmoothPoisson.background")); // NOI18N
        SmoothButtonGroup.add(SmoothPoisson);
        SmoothPoisson.setText(resourceMap.getString("SmoothPoisson.text")); // NOI18N
        SmoothPoisson.setToolTipText(resourceMap.getString("SmoothPoisson.toolTipText")); // NOI18N
        SmoothPoisson.setName("SmoothPoisson"); // NOI18N

        ARMAnumSamples.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ARMAnumSamples.setText(resourceMap.getString("ARMAnumSamples.text")); // NOI18N
        ARMAnumSamples.setName("ARMAnumSamples"); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, SmoothARMA, org.jdesktop.beansbinding.ELProperty.create("${selected}"), ARMAnumSamples, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        numSamplesText.setText(resourceMap.getString("numSamplesText.text")); // NOI18N
        numSamplesText.setName("numSamplesText"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, SmoothARMA, org.jdesktop.beansbinding.ELProperty.create("${selected}"), numSamplesText, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout SmoothTabLayout = new javax.swing.GroupLayout(SmoothTab);
        SmoothTab.setLayout(SmoothTabLayout);
        SmoothTabLayout.setHorizontalGroup(
            SmoothTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SmoothTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SmoothTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SmoothTabLayout.createSequentialGroup()
                        .addComponent(SmoothARMA)
                        .addGap(58, 58, 58)
                        .addComponent(ARMAnumSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(numSamplesText))
                    .addComponent(Smoothnone)
                    .addComponent(SmoothPoisson))
                .addContainerGap(341, Short.MAX_VALUE))
        );
        SmoothTabLayout.setVerticalGroup(
            SmoothTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SmoothTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Smoothnone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(SmoothTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SmoothARMA)
                    .addComponent(ARMAnumSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numSamplesText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SmoothPoisson)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("SmoothTab.TabConstraints.tabTitle"), SmoothTab); // NOI18N

        WindowTab.setBackground(resourceMap.getColor("WindowTab.background")); // NOI18N
        WindowTab.setName("WindowTab"); // NOI18N

        windowNone.setBackground(resourceMap.getColor("windowNone.background")); // NOI18N
        WindowButtonGroup.add(windowNone);
        windowNone.setSelected(true);
        windowNone.setText(resourceMap.getString("windowNone.text")); // NOI18N
        windowNone.setToolTipText(resourceMap.getString("windowNone.toolTipText")); // NOI18N
        windowNone.setName("windowNone"); // NOI18N
        windowNone.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                windowNoneStateChanged(evt);
            }
        });

        windowRectangle.setBackground(resourceMap.getColor("windowRectangle.background")); // NOI18N
        WindowButtonGroup.add(windowRectangle);
        windowRectangle.setText(resourceMap.getString("windowRectangle.text")); // NOI18N
        windowRectangle.setToolTipText(resourceMap.getString("windowRectangle.toolTipText")); // NOI18N
        windowRectangle.setName("windowRectangle"); // NOI18N

        windowBlackman.setBackground(resourceMap.getColor("windowBlackman.background")); // NOI18N
        WindowButtonGroup.add(windowBlackman);
        windowBlackman.setText(resourceMap.getString("windowBlackman.text")); // NOI18N
        windowBlackman.setToolTipText(resourceMap.getString("windowBlackman.toolTipText")); // NOI18N
        windowBlackman.setName("windowBlackman"); // NOI18N

        PanelWindowParameters.setBackground(resourceMap.getColor("PanelWindowParameters.background")); // NOI18N
        PanelWindowParameters.setName("PanelWindowParameters"); // NOI18N

        windowParameterlabel.setFont(resourceMap.getFont("windowParameterlabel.font")); // NOI18N
        windowParameterlabel.setText(resourceMap.getString("windowParameterlabel.text")); // NOI18N
        windowParameterlabel.setName("windowParameterlabel"); // NOI18N

        PercentofPeak.setBackground(resourceMap.getColor("PercentofPeak.background")); // NOI18N
        WindowParameterButtonGroup.add(PercentofPeak);
        PercentofPeak.setSelected(true);
        PercentofPeak.setText(resourceMap.getString("PercentofPeak.text")); // NOI18N
        PercentofPeak.setToolTipText(resourceMap.getString("PercentofPeak.toolTipText")); // NOI18N
        PercentofPeak.setName("PercentofPeak"); // NOI18N
        PercentofPeak.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                PercentofPeakStateChanged(evt);
            }
        });

        PercentPeak_value.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PercentPeak_value.setText(resourceMap.getString("PercentPeak_value.text")); // NOI18N
        PercentPeak_value.setName("PercentPeak_value"); // NOI18N

        PercentLabel.setText(resourceMap.getString("PercentLabel.text")); // NOI18N
        PercentLabel.setName("PercentLabel"); // NOI18N

        FixedIndex.setBackground(resourceMap.getColor("FixedIndex.background")); // NOI18N
        WindowParameterButtonGroup.add(FixedIndex);
        FixedIndex.setText(resourceMap.getString("FixedIndex.text")); // NOI18N
        FixedIndex.setToolTipText(resourceMap.getString("FixedIndex.toolTipText")); // NOI18N
        FixedIndex.setName("FixedIndex"); // NOI18N
        FixedIndex.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                FixedIndexStateChanged(evt);
            }
        });

        Fixed_min_value.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Fixed_min_value.setText(resourceMap.getString("Fixed_min_value.text")); // NOI18N
        Fixed_min_value.setName("Fixed_min_value"); // NOI18N

        minEV.setText(resourceMap.getString("minEV.text")); // NOI18N
        minEV.setName("minEV"); // NOI18N

        Fixed_max_value.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Fixed_max_value.setText(resourceMap.getString("Fixed_max_value.text")); // NOI18N
        Fixed_max_value.setName("Fixed_max_value"); // NOI18N

        MAXEV.setText(resourceMap.getString("MAXEV.text")); // NOI18N
        MAXEV.setName("MAXEV"); // NOI18N

        javax.swing.GroupLayout PanelWindowParametersLayout = new javax.swing.GroupLayout(PanelWindowParameters);
        PanelWindowParameters.setLayout(PanelWindowParametersLayout);
        PanelWindowParametersLayout.setHorizontalGroup(
            PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelWindowParametersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(windowParameterlabel)
                    .addGroup(PanelWindowParametersLayout.createSequentialGroup()
                        .addGroup(PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PercentofPeak)
                            .addComponent(FixedIndex))
                        .addGap(33, 33, 33)
                        .addGroup(PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Fixed_min_value, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelWindowParametersLayout.createSequentialGroup()
                                .addComponent(PercentPeak_value, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PercentLabel)))))
                .addContainerGap(71, Short.MAX_VALUE))
            .addGroup(PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelWindowParametersLayout.createSequentialGroup()
                    .addGap(190, 190, 190)
                    .addComponent(minEV)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(Fixed_max_value, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(MAXEV)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        PanelWindowParametersLayout.setVerticalGroup(
            PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelWindowParametersLayout.createSequentialGroup()
                .addComponent(windowParameterlabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PercentofPeak)
                    .addComponent(PercentPeak_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PercentLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FixedIndex)
                    .addComponent(Fixed_min_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(PanelWindowParametersLayout.createSequentialGroup()
                    .addGap(56, 56, 56)
                    .addGroup(PanelWindowParametersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(minEV)
                        .addComponent(Fixed_max_value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(MAXEV))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout WindowTabLayout = new javax.swing.GroupLayout(WindowTab);
        WindowTab.setLayout(WindowTabLayout);
        WindowTabLayout.setHorizontalGroup(
            WindowTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WindowTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(WindowTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WindowTabLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(PanelWindowParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(windowNone)
                    .addComponent(windowRectangle)
                    .addComponent(windowBlackman))
                .addContainerGap(201, Short.MAX_VALUE))
        );
        WindowTabLayout.setVerticalGroup(
            WindowTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WindowTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(windowNone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(windowRectangle)
                .addGap(3, 3, 3)
                .addComponent(windowBlackman)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelWindowParameters, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(resourceMap.getString("WindowTab.TabConstraints.tabTitle"), WindowTab); // NOI18N

        OffsetTab.setBackground(resourceMap.getColor("OffsetTab.background")); // NOI18N
        OffsetTab.setName("OffsetTab"); // NOI18N

        Rangenone.setBackground(resourceMap.getColor("Rangenone.background")); // NOI18N
        RangeAxisGroup.add(Rangenone);
        Rangenone.setSelected(true);
        Rangenone.setText(resourceMap.getString("Rangenone.text")); // NOI18N
        Rangenone.setToolTipText(resourceMap.getString("Rangenone.toolTipText")); // NOI18N
        Rangenone.setName("Rangenone"); // NOI18N

        FixedRangeradio.setBackground(resourceMap.getColor("FixedRangeradio.background")); // NOI18N
        RangeAxisGroup.add(FixedRangeradio);
        FixedRangeradio.setText(resourceMap.getString("FixedRangeradio.text")); // NOI18N
        FixedRangeradio.setToolTipText(resourceMap.getString("FixedRangeradio.toolTipText")); // NOI18N
        FixedRangeradio.setName("FixedRangeradio"); // NOI18N

        domaindNone.setBackground(resourceMap.getColor("domaindNone.background")); // NOI18N
        DomainAxisGroup.add(domaindNone);
        domaindNone.setSelected(true);
        domaindNone.setText(resourceMap.getString("domaindNone.text")); // NOI18N
        domaindNone.setToolTipText(resourceMap.getString("domaindNone.toolTipText")); // NOI18N
        domaindNone.setName("domaindNone"); // NOI18N

        FixedDomainradio.setBackground(resourceMap.getColor("FixedDomainradio.background")); // NOI18N
        DomainAxisGroup.add(FixedDomainradio);
        FixedDomainradio.setText(resourceMap.getString("FixedDomainradio.text")); // NOI18N
        FixedDomainradio.setToolTipText(resourceMap.getString("FixedDomainradio.toolTipText")); // NOI18N
        FixedDomainradio.setName("FixedDomainradio"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        RangeOffsetvalue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RangeOffsetvalue.setText(resourceMap.getString("RangeOffsetvalue.text")); // NOI18N
        RangeOffsetvalue.setName("RangeOffsetvalue"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, FixedRangeradio, org.jdesktop.beansbinding.ELProperty.create("${selected}"), RangeOffsetvalue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, FixedRangeradio, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel6, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout OffsetTabLayout = new javax.swing.GroupLayout(OffsetTab);
        OffsetTab.setLayout(OffsetTabLayout);
        OffsetTabLayout.setHorizontalGroup(
            OffsetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OffsetTabLayout.createSequentialGroup()
                .addGroup(OffsetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OffsetTabLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(OffsetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FixedDomainradio)
                            .addGroup(OffsetTabLayout.createSequentialGroup()
                                .addComponent(FixedRangeradio)
                                .addGap(18, 18, 18)
                                .addComponent(RangeOffsetvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addComponent(Rangenone)
                            .addComponent(domaindNone)))
                    .addGroup(OffsetTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addGroup(OffsetTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)))
                .addContainerGap(287, Short.MAX_VALUE))
        );
        OffsetTabLayout.setVerticalGroup(
            OffsetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OffsetTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Rangenone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OffsetTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FixedRangeradio)
                    .addComponent(RangeOffsetvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(domaindNone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FixedDomainradio)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("OffsetTab.TabConstraints.tabTitle"), OffsetTab); // NOI18N

        NormalTab.setBackground(resourceMap.getColor("NormalTab.background")); // NOI18N
        NormalTab.setName("NormalTab"); // NOI18N

        noneNormal.setBackground(resourceMap.getColor("noneNormal.background")); // NOI18N
        NormalizeButtonGroup.add(noneNormal);
        noneNormal.setSelected(true);
        noneNormal.setText(resourceMap.getString("noneNormal.text")); // NOI18N
        noneNormal.setToolTipText(resourceMap.getString("noneNormal.toolTipText")); // NOI18N
        noneNormal.setName("noneNormal"); // NOI18N

        NormalPeakradio.setBackground(resourceMap.getColor("NormalPeakradio.background")); // NOI18N
        NormalizeButtonGroup.add(NormalPeakradio);
        NormalPeakradio.setText(resourceMap.getString("NormalPeakradio.text")); // NOI18N
        NormalPeakradio.setToolTipText(resourceMap.getString("NormalPeakradio.toolTipText")); // NOI18N
        NormalPeakradio.setName("NormalPeakradio"); // NOI18N

        NormalPeakvalue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NormalPeakvalue.setText(resourceMap.getString("NormalPeakvalue.text")); // NOI18N
        NormalPeakvalue.setName("NormalPeakvalue"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, NormalPeakradio, org.jdesktop.beansbinding.ELProperty.create("${selected}"), NormalPeakvalue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, NormalPeakradio, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel7, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        NormalEnergyradio.setBackground(resourceMap.getColor("NormalEnergyradio.background")); // NOI18N
        NormalizeButtonGroup.add(NormalEnergyradio);
        NormalEnergyradio.setText(resourceMap.getString("NormalEnergyradio.text")); // NOI18N
        NormalEnergyradio.setToolTipText(resourceMap.getString("NormalEnergyradio.toolTipText")); // NOI18N
        NormalEnergyradio.setName("NormalEnergyradio"); // NOI18N

        NormalEnergyvalue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NormalEnergyvalue.setText(resourceMap.getString("NormalEnergyvalue.text")); // NOI18N
        NormalEnergyvalue.setName("NormalEnergyvalue"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, NormalEnergyradio, org.jdesktop.beansbinding.ELProperty.create("${selected}"), NormalEnergyvalue, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, NormalEnergyradio, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jLabel8, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout NormalTabLayout = new javax.swing.GroupLayout(NormalTab);
        NormalTab.setLayout(NormalTabLayout);
        NormalTabLayout.setHorizontalGroup(
            NormalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NormalTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NormalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noneNormal)
                    .addGroup(NormalTabLayout.createSequentialGroup()
                        .addGroup(NormalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NormalPeakradio)
                            .addComponent(NormalEnergyradio))
                        .addGap(18, 18, 18)
                        .addGroup(NormalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(NormalEnergyvalue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                            .addComponent(NormalPeakvalue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NormalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7))))
                .addContainerGap(326, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        NormalTabLayout.setVerticalGroup(
            NormalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NormalTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noneNormal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(NormalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NormalPeakradio)
                    .addComponent(NormalPeakvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(NormalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NormalEnergyradio)
                    .addComponent(NormalEnergyvalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(resourceMap.getString("NormalTab.TabConstraints.tabTitle"), NormalTab); // NOI18N

        javax.swing.GroupLayout ControlPanelLayout = new javax.swing.GroupLayout(ControlPanel);
        ControlPanel.setLayout(ControlPanelLayout);
        ControlPanelLayout.setHorizontalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addContainerGap())
        );
        ControlPanelLayout.setVerticalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );

        ButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("ButtonPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("ButtonPanel.border.titleFont"))); // NOI18N
        ButtonPanel.setName("ButtonPanel"); // NOI18N

        ApplyButton.setText(resourceMap.getString("ApplyButton.text")); // NOI18N
        ApplyButton.setName("ApplyButton"); // NOI18N
        ApplyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ApplyButtonMouseClicked(evt);
            }
        });

        ResetButton.setText(resourceMap.getString("ResetButton.text")); // NOI18N
        ResetButton.setName("ResetButton"); // NOI18N
        ResetButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ResetButtonMouseClicked(evt);
            }
        });

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        javax.swing.GroupLayout ButtonPanelLayout = new javax.swing.GroupLayout(ButtonPanel);
        ButtonPanel.setLayout(ButtonPanelLayout);
        ButtonPanelLayout.setHorizontalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ButtonPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(117, 117, 117))
                    .addComponent(ApplyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ResetButton)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        ButtonPanelLayout.setVerticalGroup(
            ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ButtonPanelLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ButtonPanelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(ButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ApplyButton)
                    .addComponent(ResetButton))
                .addContainerGap())
        );

        SaveCancelpanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("SaveCancelpanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("SaveCancelpanel.border.titleFont"))); // NOI18N
        SaveCancelpanel.setName("SaveCancelpanel"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        KernelNamevalue.setText(resourceMap.getString("KernelNamevalue.text")); // NOI18N
        KernelNamevalue.setToolTipText(resourceMap.getString("KernelNamevalue.toolTipText")); // NOI18N
        KernelNamevalue.setName("KernelNamevalue"); // NOI18N

        SaveButton.setText(resourceMap.getString("SaveButton.text")); // NOI18N
        SaveButton.setName("SaveButton"); // NOI18N
        SaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaveButtonMouseClicked(evt);
            }
        });

        CancelButton.setText(resourceMap.getString("CancelButton.text")); // NOI18N
        CancelButton.setName("CancelButton"); // NOI18N
        CancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CancelButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout SaveCancelpanelLayout = new javax.swing.GroupLayout(SaveCancelpanel);
        SaveCancelpanel.setLayout(SaveCancelpanelLayout);
        SaveCancelpanelLayout.setHorizontalGroup(
            SaveCancelpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaveCancelpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SaveCancelpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SaveCancelpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(SaveCancelpanelLayout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addContainerGap(243, Short.MAX_VALUE))
                        .addGroup(SaveCancelpanelLayout.createSequentialGroup()
                            .addComponent(KernelNamevalue, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                            .addGap(16, 16, 16)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SaveCancelpanelLayout.createSequentialGroup()
                        .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CancelButton)
                        .addGap(14, 14, 14))))
        );
        SaveCancelpanelLayout.setVerticalGroup(
            SaveCancelpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaveCancelpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KernelNamevalue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SaveCancelpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveButton)
                    .addComponent(CancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ModifiedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 951, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(SaveCancelpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(OrginalPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 951, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OrginalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ModifiedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(SaveCancelpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Redraws the modified ionchart window.
     * 
     * @param modION Integer array of the new ionization vector
     */
    private void redrawMODchart(int[] modION){

        try{
            XYChartHelpers helper = new XYChartHelpers(ChartType.IonChart, ModifiedPanel.getSize());
            
            //ChartPanel, then casting into a XYPlot
            ChartPanel ionchartPanel = (ChartPanel) ModifiedPanel.getComponent(0);
            XYPlot plot = (XYPlot) ionchartPanel.getChart().getPlot();
            
            plot.setDataset(helper.createDataset(this.ReferencedMSdata.getIonVectorArray(), modION));
            
        }
        catch (Exception ex){
            ex.printStackTrace();
        }
    }
    
    /**
     * Cancels the entire operation
     * 
     * @param evt 
     */
    private void CancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CancelButtonMouseClicked
        // TODO add your handling code here:
        this.OK_flag = Boolean.FALSE;
        
        this.setVisible(Boolean.FALSE);
    }//GEN-LAST:event_CancelButtonMouseClicked

    /**
     * Executes each desired modification the Convolution Kernel.
     * 
     * @param vector The original ionization vector
     * @param ForceUnitIndex Forces the modified vector to index location 1
     * @return 
     */
    private int[] applyChanges(int[] vector,Boolean ForceUnitIndex){
        int[] temp = vector;
        
        //Clear out the recipe
        recipe.clear();
        
        //Smoothing
        if (Smoothnone.isSelected()){
            recipe.add(0,"none");
        }
        else if (SmoothARMA.isSelected()){
            temp = this.PreProcessEngine.ARMA(temp, 
                                                           Integer.parseInt(ARMAnumSamples.getText()));
            recipe.add(0,"ARMA");
        }
        else if (SmoothPoisson.isSelected()){
            temp = this.PreProcessEngine.ARMA(temp, 
                                                           4);
            recipe.add(0,"Possion");
        }
        
        //Windowing
        if (windowNone.isSelected()){
            recipe.add(1,"none");
        }
        else if (windowRectangle.isSelected()){
            if (PercentofPeak.isSelected()){
                temp = this.PreProcessEngine.RectangularWindow(temp, 
                                                                            Double.parseDouble(PercentPeak_value.getText()));
                recipe.add(1,"Rectangle Window Percent of Peak");
            }
            else if (FixedIndex.isSelected()){
                try{
                    int StartIndex = this.ReferencedMSdata.getIONindex(Double.parseDouble(Fixed_min_value.getText()));
                    int EndIndex = this.ReferencedMSdata.getIONindex(Double.parseDouble(Fixed_max_value.getText()));
                    
                    temp = this.PreProcessEngine.RectangularWindow(temp, 
                                                                            StartIndex,
                                                                            EndIndex);
                    recipe.add(1,"Rectangle Window Fixed Index");
                }
                catch (Exception ex){
                    ex.printStackTrace();
                }
            }
        }
        else if (windowBlackman.isSelected()){
            if (PercentofPeak.isSelected()){
                temp = this.PreProcessEngine.BlackmanWindow(temp, 
                                                                            Double.parseDouble(PercentPeak_value.getText()));
                recipe.add(1,"Blackman Window Percent of Peak");
            }
            else if (FixedIndex.isSelected()){
                try{
                    int StartIndex = this.ReferencedMSdata.getIONindex(Double.parseDouble(Fixed_min_value.getText()));
                    int EndIndex = this.ReferencedMSdata.getIONindex(Double.parseDouble(Fixed_max_value.getText()));
                    
                    temp = this.PreProcessEngine.BlackmanWindow(temp, 
                                                                            StartIndex,
                                                                            EndIndex);
                    recipe.add(1,"Blackman Window Fixed Index");
                }
                catch (Exception ex){
                    ex.printStackTrace();
                }
            }
        }
        
        //Offsetting
        if (Rangenone.isSelected()){
            recipe.add(2,"none");
        }
        else if (FixedRangeradio.isSelected()){
            temp = this.PreProcessEngine.RangeOffset(temp, 
                                                                Integer.parseInt(RangeOffsetvalue.getText()));
            recipe.add(2,"Fixed Range");
        }
        
        if (ForceUnitIndex){
            temp = this.PreProcessEngine.DomainOffset(temp);
            recipe.add(3,"Fixed Domain");
        }
        else{
            if (domaindNone.isSelected()){
                recipe.add(3,"none");
            }
            else if (FixedDomainradio.isSelected()){
                temp = this.PreProcessEngine.DomainOffset(temp);
                recipe.add(3,"Fixed Domain");
            }
        }
        
        
        //Normalizing
        if (noneNormal.isSelected()){
            recipe.add(4,"none");
        }
        else if (NormalPeakradio.isSelected()){
            temp = this.PreProcessEngine.NormalizePeak(temp, 
                                                                    Double.parseDouble(NormalPeakvalue.getText()));
            recipe.add(4,"Normalize Peak");
        }
        else if (NormalEnergyradio.isSelected()){
            recipe.add(4,"Normalize Energy");
        }
        
        return temp;
    }
    
    /**
     * Handles when the apply button is pressed.  Calls applyChanges() method.
     * 
     * @param evt 
     */
    private void ApplyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ApplyButtonMouseClicked
        //Really ugly way of doing this, but the button group does not have
        //isSelected method
        
        //Zero-out the Modification Ion-Vector
        this.ModIONvector = this.orginalIONvector;

        //Get the Changes
        this.ModIONvector = this.applyChanges(this.ModIONvector, false);
        
        //Rebuild the Chart
        this.redrawMODchart(this.ModIONvector);
    }//GEN-LAST:event_ApplyButtonMouseClicked

    /**
     * 
     * 
     * @param evt 
     */
    private void windowNoneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_windowNoneStateChanged

        if (windowNone.isSelected()){
            windowParameterlabel.setEnabled(false);
            PercentofPeak.setEnabled(false);
            FixedIndex.setEnabled(false);
            PercentPeak_value.setEnabled(false);
            PercentLabel.setEnabled(false);
            Fixed_min_value.setEnabled(false);
            Fixed_max_value.setEnabled(false);
            minEV.setEnabled(false);
            MAXEV.setEnabled(false);
        }
        else{
            windowParameterlabel.setEnabled(true);
            
            PercentofPeak.setEnabled(true);
            FixedIndex.setEnabled(true);
            
            if (PercentofPeak.isSelected()){
                PercentPeak_value.setEnabled(true);
                PercentLabel.setEnabled(true);
            }
            else{
                PercentPeak_value.setEnabled(false);
                PercentLabel.setEnabled(false);
            }
            
            if (FixedIndex.isSelected()){
                Fixed_min_value.setEnabled(true);
                Fixed_max_value.setEnabled(true);
                minEV.setEnabled(true);
                MAXEV.setEnabled(true);
            }
            else{
                Fixed_min_value.setEnabled(false);
                Fixed_max_value.setEnabled(false);
                minEV.setEnabled(false);
                MAXEV.setEnabled(false); 
            }
            
        }
    }//GEN-LAST:event_windowNoneStateChanged

    private void PercentofPeakStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_PercentofPeakStateChanged
        // TODO add your handling code here:
        //if (PanelWindowParameters.isEnabled()){
            if (PercentofPeak.isSelected()){
                PercentPeak_value.setEnabled(true);
                PercentLabel.setEnabled(true);
            }
            else{
                PercentPeak_value.setEnabled(false);
                PercentLabel.setEnabled(false);
            }
        //}
        
    }//GEN-LAST:event_PercentofPeakStateChanged

    private void FixedIndexStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_FixedIndexStateChanged
        // TODO add your handling code here:
        //if (PanelWindowParameters.isEnabled()){
            if (FixedIndex.isSelected()){
                Fixed_min_value.setEnabled(true);
                Fixed_max_value.setEnabled(true);
                minEV.setEnabled(true);
                MAXEV.setEnabled(true);
            }
            else{
                Fixed_min_value.setEnabled(false);
                Fixed_max_value.setEnabled(false);
                minEV.setEnabled(false);
                MAXEV.setEnabled(false); 
            }
        //}
    }//GEN-LAST:event_FixedIndexStateChanged

    private void ResetButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ResetButtonMouseClicked
        // TODO add your handling code here:
        //Zero-out the Modification Ion-Vector
        this.ModIONvector = this.orginalIONvector;
        
        //zerro out recipe
        recipe.clear();
        
        //Rebuild the Chart
        this.redrawMODchart(this.ModIONvector);
    }//GEN-LAST:event_ResetButtonMouseClicked

    private void SaveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveButtonMouseClicked
        
        //Rebuild the output one more time
        //Zero-out the Modification Ion-Vector
        this.ModIONvector = this.orginalIONvector;
        //Get the Changes
        this.ModIONvector = this.applyChanges(this.ModIONvector, true);
        
        //Save the Configuration/Recipe File
        if (!KernelNamevalue.getText().isEmpty()){
            try{
                ConfigReader result = new ConfigReader();
                String LastDir = result.getConfigParameter("/root/LastOpenedDirectory");
                XML_FileSaver handler = new XML_FileSaver(LastDir,"ConvolutionKernals");

                //Pass all of the configurations to save
                handler.saveConvolutionKernelEntry(
                                                    KernelNamevalue.getText(), 
                                                    recipe.get(0), 
                                                    ARMAnumSamples.getText(), 
                                                    recipe.get(1), 
                                                    PercentPeak_value.getText(), 
                                                    Fixed_min_value.getText(), 
                                                    Fixed_max_value.getText(), 
                                                    recipe.get(2), 
                                                    recipe.get(3), 
                                                    RangeOffsetvalue.getText(), 
                                                    "0", 
                                                    recipe.get(4), 
                                                    NormalPeakvalue.getText(), 
                                                    NormalEnergyvalue.getText(),
                                                    this.MZ_Value,
                                                    this.MZ_Range,
                                                    this.orginalIONvector,
                                                    this.ModIONvector);

                //Trash the Handler and run gc()
                handler = null;
                System.gc();

            }
            catch (Exception ex){
                ex.printStackTrace();
            }
            
            //Build the A matrix
            A = PreProcessEngine.buildConvolutionMatrix(this.ModIONvector);
            
            this.OK_flag = Boolean.TRUE;
            this.setVisible(Boolean.FALSE);
        }
        else{
            //custom title, error icon
            JOptionPane.showMessageDialog(this,
                "Please Enter a name for the Convolution Kernel",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
        
  
    }//GEN-LAST:event_SaveButtonMouseClicked
    
    public Matrix getMatrix() throws Exception{
        
        if (this.OK_flag = true){
            return this.A;
        }
        else{
            throw new Exception("No Matrix exist, run Convolution Kernel Manager");
        }
        
    }
    
    public int[] getFirstVector() throws Exception{
        
        if (this.OK_flag = true){
            return this.ModIONvector;
        }
        else{
            throw new Exception("No Modified ION vector exists, check Deconvolution manager");
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConvolutionManager_JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConvolutionManager_JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConvolutionManager_JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConvolutionManager_JDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ConvolutionManager_JDialog dialog = new ConvolutionManager_JDialog(new javax.swing.JFrame(),new ConfigReader(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ARMAnumSamples;
    private javax.swing.JButton ApplyButton;
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JButton CancelButton;
    private javax.swing.JPanel ControlPanel;
    private javax.swing.ButtonGroup DomainAxisGroup;
    private javax.swing.JRadioButton FixedDomainradio;
    private javax.swing.JRadioButton FixedIndex;
    private javax.swing.JRadioButton FixedRangeradio;
    private javax.swing.JTextField Fixed_max_value;
    private javax.swing.JTextField Fixed_min_value;
    private javax.swing.JTextField KernelNamevalue;
    private javax.swing.JLabel MAXEV;
    private javax.swing.JPanel ModifiedPanel;
    private javax.swing.JRadioButton NormalEnergyradio;
    private javax.swing.JTextField NormalEnergyvalue;
    private javax.swing.JRadioButton NormalPeakradio;
    private javax.swing.JTextField NormalPeakvalue;
    private javax.swing.JPanel NormalTab;
    private javax.swing.ButtonGroup NormalizeButtonGroup;
    private javax.swing.JPanel OffsetTab;
    private javax.swing.JPanel OrginalPanel;
    private javax.swing.JPanel PanelWindowParameters;
    private javax.swing.JLabel PercentLabel;
    private javax.swing.JTextField PercentPeak_value;
    private javax.swing.JRadioButton PercentofPeak;
    private javax.swing.ButtonGroup RangeAxisGroup;
    private javax.swing.JTextField RangeOffsetvalue;
    private javax.swing.JRadioButton Rangenone;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JPanel SaveCancelpanel;
    private javax.swing.JRadioButton SmoothARMA;
    private javax.swing.ButtonGroup SmoothButtonGroup;
    private javax.swing.JRadioButton SmoothPoisson;
    private javax.swing.JPanel SmoothTab;
    private javax.swing.JRadioButton Smoothnone;
    private javax.swing.ButtonGroup WindowButtonGroup;
    private javax.swing.ButtonGroup WindowParameterButtonGroup;
    private javax.swing.JPanel WindowTab;
    private javax.swing.JRadioButton domaindNone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel minEV;
    private javax.swing.JRadioButton noneNormal;
    private javax.swing.JLabel numSamplesText;
    private javax.swing.JRadioButton windowBlackman;
    private javax.swing.JRadioButton windowNone;
    private javax.swing.JLabel windowParameterlabel;
    private javax.swing.JRadioButton windowRectangle;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
